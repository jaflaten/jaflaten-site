[{"body":"Welcome to the Compose theme user guide! This guide shows you how to get started creating technical documentation sites using Compose, including site customization and how to use Compose's blocks and templates.\nGet started now ","link":"https://example.com/docs/compose/","section":"docs","title":"Compose Docs"},{"body":"These docs consists of two parts:\nHugo Compose Themes docs Hugo Clarity Theme docs. Please note that the features listed under each theme are independent of each other. That is to say, some features may only be found in one theme and not in both.\nCompose Theme Docs Clarity Theme Docs ","link":"https://example.com/docs/","section":"docs","title":"Themes' Docs"},{"body":"Prerequisites First ensure that you have hugo installed.\nYou need a recent extended version (we recommend version 0.61 or later) of Hugo to do local builds and previews of sites (like this one) that uses this theme.\nIf you install from the release page, make sure to get the extended Hugo version, which supports sass; you may need to scroll down the list of releases to see it.\nFor comprehensive Hugo documentation, see gohugo.io.\nRun your site with compose theme You could go with the options right below.\nOption 1 (my favorite) This option enables you to load compose theme as a hugo module. First things first, ensure you have go binary installed on your machine.\n1$ git clone https://github.com/onweru/compose/ 2cd compose/exampleSite/ 3hugo server To pull in theme updates, run hugo mod get -u ./... from the theme folder. If unsure, learn how to update hugo modules\nThe exampleSite uses the theme as a hugo module by default.\nIf you choose Option 2 or Option 3 below, ensure you edit these lines in the config.toml file as advised on the comments. Else, you will not be able to pull theme updates.\nOption 2 (recommended) Generate a new Hugo site and add this theme as a Git submodule inside your themes folder:\n1hugo new site yourSiteName 2cd yourSiteName 3git init 4git submodule add https://github.com/onweru/compose/ themes/compose 5cp -a themes/compose/exampleSite/* . Then run\n1hugo server Hurray!\nOption 3 (Great for testing quickly) You can run your site directly from the exampleSite. To do so, use the following commands:\n1git clone https://github.com/onweru/compose/ 2cd compose/exampleSite/ 3hugo server --themesDir ../.. Although, option 3 is great for quick testing, it is somewhat problematic when you want to update your theme. You would need to be careful not to overwrite your changes. Once set, jump over to the config.toml file and start configuring your site.\n","link":"https://example.com/docs/compose/install-theme/","section":"docs","title":"Install theme"},{"body":"Do you prefer managing your site using a CMS? Or would you like to make it easier for someone (a non-techie, perhaps) in your team to make edits easily? If interested, follow along. Else, skip to the next section\nLet's sync your site with forestry CMS.\nPrerequisites !! Obviously you ought to have a github account. This is where your website source will live. Basically, forestry will read from github and write (commmit) to your github repo.\nGitlab or bitbucket will work too. Just check their implementation here. Happy fishing. Requirement 1 : A Forestry account Jump over to forestry and sign up for an account. Consider signing up using your github account. That way, you don't have to deal with passwords.\nRequirement 2: A Netlify account (optional) If you intend to host with something other than Netlify e.g github pages, please scroll on. Hosting with Netlify is a lot of fun though; I highly recommend it.\nStep 1 : Fork or Clone Compse theme First we will fork this theme's template.\nStep 2 : Add your repository in Forestry The exampleSite already comes with prefilled default forestry settings. If you set up your site using option 2, look for a file .forestry/settings.yml and remove all exampleSite/ strings from it. Go to your forestry account and click on import your site now.\nChoose hugo github or gitlab. wherever your repo is at. Select your repo ","link":"https://example.com/docs/compose/use-forestry-cms/","section":"docs","title":"Use forestry CMS"},{"body":"This theme is primarily meant for documentation.\nDocumentation By default, the theme will look for all your documentation content within the docs directory.\nHowever, if you would like to have your docs content across multiple directories, please list those directories inside config/_default/params.toml under docSections like so:\n... docSections = [\u0026#34;docs\u0026#34;, \u0026#34;tutorials\u0026#34;] ... Unlike other regular pages, the documentation pages will have a left sidebar. This sidebar will list links to all the pages in the documentation pages. Beneath each link, there will be a collapsible list of table of contents' links. These nested lists will unfold automatically on the active/current page.\nHome Page At the root level there's an _index.md page which is the homepage. Feel free to edit it as you like.\nOther pages You can also add as many regular pages as you like e.g about.md, contact.md...\nTake advantage of shortcodes to customize the layouts of these pages and any other.\nDoes this theme support blogging function? Currently, no.\n","link":"https://example.com/docs/compose/organize-content/","section":"docs","title":"Content organization"},{"body":"Instead of writing all your site pages from scratch, Hugo lets you define and use shortcodes.\nWhy shortcodes? While markdown is sufficient to produce simple pages, it's insufficient where complex page structures are needed. Thusly, whenever we need special styling, shortcodes compliment the shortcomings of markdown.\nThis way, you can side step complex html and css boilerplate in your content files.\nSometimes, the shortcode will wrap content, sometimes it won't. When content is wrapped, a closing shortcode tag is needed. Please see the link I provided above and the markdown files for examples. You'll get the gist pretty quickly.\nI've setup the following shortcodes:\nBlock Takes positional modifiers\nExample\n1... 2 {{\u0026lt; block \u0026#34;modifiers\u0026#34; \u0026gt;}} 3 \u0026lt;!-- Nest columns or content --\u0026gt; 4 {{\u0026lt; /block \u0026gt;}} 5... Column It takes positional parameters\nExample\n1 {{\u0026lt; column \u0026#34;mt-2 mb-2\u0026#34; \u0026gt;}} 2 \u0026lt;!-- applied margin top and margin bottom modifiers --\u0026gt; 3 {{\u0026lt; /column \u0026gt;}} Youtube Video This allows you to embed a youtube video in you content. You would achieve that using a positional parameter (needs no name )parameter, like so:\nSyntax\n1 {{\u0026lt; youtube \u0026#34;25QyCxVkXwQ\u0026#34; \u0026gt;}} 2 \u0026lt;!-- Use the youtube video id --\u0026gt; Result\nOR\nSyntax\n1\u0026lt;!-- or use full url --\u0026gt; 2{{\u0026lt; youtube \u0026#34;https://www.youtube.com/watch?v=MmG2ah5Df4g\u0026#34; \u0026gt;}} Result\nButton This adds a styled link (styled like a button). It takes two no-optional parameters:\nPARAMETER PURPOSE OPTIONAL label button text no url button link no modifier styling classes yes Example\n1 {{\u0026lt; button \u0026#34;/\u0026#34; \u0026#34;doe nu mee\u0026#34; \u0026gt;}} Picture You want to use darkmode images when darkmode is enabled on a device and a regular image on lightmode? It takes 3 positional parameter\nStore these images in the static/images directory.\nSyntax\n1... 2{{\u0026lt; picture \u0026#34;lightModeImage.png\u0026#34; \u0026#34;darkModeImage.png\u0026#34; \u0026#34;Image alt text\u0026#34; \u0026gt;}} 3... Result\nGallery Include inline galleries within your articles. These galleries can contain N number of images. It takes 2 positional parameters.\nThe 1st parameter is required. It's a comma-separated list (,) of your images' paths.\nThe 2nd parameter is optional. It's a double-collon-separated list (::) of your images' alt/description/captions text. It's always a good SEO practice to include alt text for your images.\nSyntax\n1... 2{{\u0026lt; gallery \u0026#34;images/painting.jpg,images/scribble.jpg,images/painting.jpg\u0026#34; \u0026#34;Gallery Image 1::gallery image 2::gallery image 1 copy\u0026#34; \u0026gt;}} 3... For legibility, you may include a space after the delimiters , \u0026amp; ::\nResult\nTip Use this short if you want to publish informational tooltips that look like:\nThis tooltips may take either of the following forms:\nSyntax\n1{{\u0026lt; tip \u0026gt;}} 2Something of __interest__ you want to highlight 3{{\u0026lt; /tip \u0026gt;}} Result\nSomething of interest you want to highlight OR\nSyntax\n1{{\u0026lt; tip \u0026#34;warning\u0026#34; \u0026gt;}} 2Something of __interest__ the user should be careful about 3{{\u0026lt; /tip \u0026gt;}} Result\nSomething of interest the user should be careful about ","link":"https://example.com/docs/compose/shortcodes/","section":"docs","title":"Shortcodes"},{"body":"Firstly, ensure you have these lines inside your config.toml file\n1[outputs] 2 home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;,\u0026#34;JSON\u0026#34;] Compose implements fuse.js to enable search functionality. At the time of this writing, search on these theme takes either of this forms:\n1. Passive search This occurs only when the user loads the search page i.e /search/. They can directly navigate to that url. Alternatively, the user can type you search query on the search field and click enter. They will be redirected to the search page which will contain matched results if any.\n2. Live search This behaviour will be obvious as the user types a search query on the search field. All valid search queries, will yield a list of quick links or a simple no matches found. Else, the user will be prompted to continue typing.\nPlease note that the results under quick links will be a truncated list of the most relevant results. Only a maximum of 8 items will be returned. This number is pragmatic at best if not arbitrary. On the search page, the number is set to 12.\nNote that live search on the search page will behave differently than on the other pages. Nonetheles, the pages apply the same live search principle.\nHitting enter while typing on the search page will be moot as that page’s content will live update as you type in the search word / phrase.\nCustomize search feedback labels Use the i18n files to do so.\nWhat is a valid search query A valid search query must be long enough. If the search query can be cast as a float, then it only need contain one or more characters.\nElse the search query must be at least 2 characters long.\n","link":"https://example.com/docs/compose/search/","section":"docs","title":"Search Function"},{"body":"Mermaid is library that helps you generate diagrams, flowcharts, and piecharts from text in a similar manner as markdown.\nWith compose theme, you can use mermaid using a custom shortcode as follows:\nSequence Diagrams Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2sequenceDiagram 3 participant Alice 4 participant Bob 5 Alice-\u0026gt;\u0026gt;John: Hello John, how are you? 6 loop Healthcheck 7 John-\u0026gt;\u0026gt;John: Fight against hypochondria 8 end 9 Note right of John: Rational thoughts\u0026lt;br/\u0026gt;prevail... 10 John--\u0026gt;\u0026gt;Alice: Great! 11 John-\u0026gt;\u0026gt;Bob: How about you? 12 Bob--\u0026gt;\u0026gt;John: Jolly good! 13{{\u0026lt; /mermaid \u0026gt;}} Result\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughtsprevail... John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! Flow Charts Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2flowchart TB 3 c1--\u0026gt;a2 4 subgraph one 5 a1--\u0026gt;a2 6 end 7 subgraph two 8 b1--\u0026gt;b2 9 end 10 subgraph three 11 c1--\u0026gt;c2 12 end 13 one --\u0026gt; two 14 three --\u0026gt; two 15 two --\u0026gt; c2 16{{\u0026lt; /mermaid \u0026gt;}} Result\nflowchart TB c1--\u003ea2 subgraph one a1--\u003ea2 end subgraph two b1--\u003eb2 end subgraph three c1--\u003ec2 end one --\u003e two three --\u003e two two --\u003e c2 Graphs Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2graph TB 3 sq[Square shape] --\u0026gt; ci((Circle shape)) 4 5 subgraph A 6 od\u0026gt;Odd shape]-- Two line\u0026lt;br/\u0026gt;edge comment --\u0026gt; ro 7 di{Diamond with \u0026lt;br/\u0026gt; line break} -.-\u0026gt; ro(Rounded\u0026lt;br\u0026gt;square\u0026lt;br\u0026gt;shape) 8 di==\u0026gt;ro2(Rounded square shape) 9 end 10 11 %% Notice that no text in shape are added here instead that is appended further down 12 e --\u0026gt; od3\u0026gt;Really long text with linebreak\u0026lt;br\u0026gt;in an Odd shape] 13 14 %% Comments after double percent signs 15 e((Inner / circle\u0026lt;br\u0026gt;and some odd \u0026lt;br\u0026gt;special characters)) --\u0026gt; f(,.?!+-*ز) 16 17 cyr[Cyrillic]--\u0026gt;cyr2((Circle shape Начало)); 18 19 classDef green fill:#9f6,stroke:#333,stroke-width:2px; 20 classDef orange fill:#f96,stroke:#333,stroke-width:4px; 21 class sq,e green 22 class di orange 23{{\u0026lt; /mermaid \u0026gt;}} Result\ngraph TB sq[Square shape] --\u003e ci((Circle shape)) subgraph A od\u003eOdd shape]-- Two lineedge comment --\u003e ro di{Diamond with line break} -.-\u003e ro(Rounded\nsquare\nshape) di==\u003ero2(Rounded square shape) end %% Notice that no text in shape are added here instead that is appended further down e --\u003e od3\u003eReally long text with linebreak\nin an Odd shape] %% Comments after double percent signs e((Inner / circle\nand some odd special characters)) --\u003e f(,.?!+-*ز) cyr[Cyrillic]--\u003ecyr2((Circle shape Начало)); classDef green fill:#9f6,stroke:#333,stroke-width:2px; classDef orange fill:#f96,stroke:#333,stroke-width:4px; class sq,e green class di orange Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2graph LR 3 A[Hard edge] --\u0026gt;|Link text| B(Round edge) 4 B --\u0026gt; C{Decision} 5 C --\u0026gt;|One| D[Result one] 6 C --\u0026gt;|Two| E[Result two] 7{{\u0026lt; /mermaid \u0026gt;}} Result\ngraph LR A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] Class Diagram classDiagram Animal \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } State Diagram stateDiagram-v2 [*] --\u003e Active state Active { [*] --\u003e NumLockOff NumLockOff --\u003e NumLockOn : EvNumLockPressed NumLockOn --\u003e NumLockOff : EvNumLockPressed -- [*] --\u003e CapsLockOff CapsLockOff --\u003e CapsLockOn : EvCapsLockPressed CapsLockOn --\u003e CapsLockOff : EvCapsLockPressed -- [*] --\u003e ScrollLockOff ScrollLockOff --\u003e ScrollLockOn : EvScrollLockPressed ScrollLockOn --\u003e ScrollLockOff : EvScrollLockPressed } stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u003e State2 note left of State2 : This is the note to the left. Relationship Diagrams Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2erDiagram 3 CUSTOMER ||--o{ ORDER : places 4 ORDER ||--|{ LINE-ITEM : contains 5 CUSTOMER }|..|{ DELIVERY-ADDRESS : uses 6{{\u0026lt; /mermaid \u0026gt;}} Result\nerDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses User Journey Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2journey 3 title My working day 4 section Go to work 5 Make tea: 5: Me 6 Go upstairs: 3: Me 7 Do work: 1: Me, Cat 8 section Go home 9 Go downstairs: 5: Me 10 Sit down: 5: Me 11{{\u0026lt; /mermaid \u0026gt;}} Result\njourney title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me Gantt Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2gantt 3 dateFormat YYYY-MM-DD 4 title Adding GANTT diagram functionality to mermaid 5 excludes weekends 6 %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\u0026#34;sunday\u0026#34;) or \u0026#34;weekends\u0026#34;, but not the word \u0026#34;weekdays\u0026#34;.) 7 8 section A section 9 Completed task :done, des1, 2014-01-06,2014-01-08 10 Active task :active, des2, 2014-01-09, 3d 11 Future task : des3, after des2, 5d 12 Future task2 : des4, after des3, 5d 13 14 section Critical tasks 15 Completed task in the critical line :crit, done, 2014-01-06,24h 16 Implement parser and jison :crit, done, after des1, 2d 17 Create tests for parser :crit, active, 3d 18 Future task in critical line :crit, 5d 19 Create tests for renderer :2d 20 Add to mermaid :1d 21 22 section Documentation 23 Describe gantt syntax :active, a1, after des1, 3d 24 Add gantt diagram to demo page :after a1 , 20h 25 Add another diagram to demo page :doc1, after a1 , 48h 26 27 section Last section 28 Describe gantt syntax :after doc1, 3d 29 Add gantt diagram to demo page :20h 30 Add another diagram to demo page :48h 31{{\u0026lt; /mermaid \u0026gt;}} Result\ngantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid excludes weekends %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".) section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page :20h Add another diagram to demo page :48h Pie Chart 1{{\u0026lt; mermaid \u0026gt;}} 2pie 3 title Key elements in Product X 4 \u0026#34;Calcium\u0026#34; : 42.96 5 \u0026#34;Potassium\u0026#34; : 50.05 6 \u0026#34;Magnesium\u0026#34; : 10.01 7 \u0026#34;Iron\u0026#34; : 5 8{{\u0026lt; /mermaid \u0026gt;}} Result\npie title Key elements in Product X \"Calcium\" : 42.96 \"Potassium\" : 50.05 \"Magnesium\" : 10.01 \"Iron\" : 5 ","link":"https://example.com/docs/compose/mermaid/","section":"docs","title":"Mermaid"},{"body":"Using chart js library you can display data you have stored in a csv file as a pie chart, bar graph or doughnut chart.\nAt this point if you want to display data from a json or yaml file, you would need to convert it into csv first. Else the template will error out.\nOnce you have a csv file, you display the charts as follows:\nShow a pie, doughnut \u0026amp; bar chart at once Firstly define the data you want to display from the front matter:\n1# from front matter 2... 3[dataset1] # this key will in the chart shortcode 4 fileLink = \u0026#34;content/projects.csv\u0026#34; # path to where csv is stored 5 colors = [\u0026#34;#627c62\u0026#34;, \u0026#34;#11819b\u0026#34;, \u0026#34;#ef7f1a\u0026#34;, \u0026#34;#4e1154\u0026#34;] # chart colors 6 columnTitles = [\u0026#34;Section\u0026#34;, \u0026#34;Status\u0026#34;, \u0026#34;Author\u0026#34;] 7 charts = [\u0026#34;bar\u0026#34;, \u0026#34;doughnut\u0026#34;, \u0026#34;pie\u0026#34;, \u0026#34;table\u0026#34;] 8 baseChartOn = 3 # number of column the chart(s) and graph should be drawn from 9 piechart = true 10 doughnutchart = true 11 bargraph = true 12 title = \u0026#34;Projects\u0026#34; 13 table = true # show table listing the chart data 14 15// from page content 16... 17{{\u0026lt; grid \u0026#34; mt-2\u0026#34; \u0026gt;}} 18 {{\u0026lt; chart \u0026#34;dataset1\u0026#34; \u0026gt;}} 19{{\u0026lt; /grid \u0026gt;}} 20... Show Table at once Section Status Author project 6 alpha weru project 4 beta dan project 4 candidate dahl project y abandoned weru project 1 alpha weru project 4 beta ryan project 4 candidate dan project y abandoned weru project 11 alpha dahl project 4 beta dan project 4 candidate dan project A abandoned weru Firstly define the data you want to display from the front matter:\n1# from page front matter 2[dataset2] 3 fileLink = \u0026#34;content/themes.csv\u0026#34; # path to where csv is stored # this key will in the chart shortcode 4 colors = [\u0026#34;#627c62\u0026#34;, \u0026#34;#11819b\u0026#34;, \u0026#34;#ef7f1a\u0026#34;, \u0026#34;#4e1154\u0026#34;] # chart colors 5 columnTitles = [\u0026#34;Theme\u0026#34;, \u0026#34;Latest Version\u0026#34;, \u0026#34;Owner\u0026#34;] 6 title = \u0026#34;Hugo Themes\u0026#34; 7 baseChartOn = 2 # number of column the chart(s) and graph should be drawn from 8 piechart = false 9 doughnutchart = true 10 bargraph = true 11 table = false # show table listing the chart data Show only a pie and a doughnut chart 1// from page content 2... 3{{\u0026lt; grid \u0026#34; mt-2\u0026#34; \u0026gt;}} 4 {{\u0026lt; chart \u0026#34;dataset2\u0026#34; \u0026gt;}} 5{{\u0026lt; /grid \u0026gt;}} 6... Show table with filter Theme Latest Version Repo Owner clarity V.1 chipzoller compose V.1 weru swift V.2 weru newsroom V.1 weru Show table only Theme Latest Version Repo Owner clarity V.1 chipzoller compose V.1 weru swift V.2 weru newsroom V.1 weru ","link":"https://example.com/docs/compose/graphs-charts-tables/","section":"docs","title":"Graphs, charts \u0026 dynamic tables"},{"body":"Hugo Clarity is a technology-minded theme for Hugo based on VMware's open-source Clarity Design System featuring rich code support, dark/light mode, mobile support, and much more. See a live demo at neonmirrors.net.\nGet started with Clarity ","link":"https://example.com/docs/clarity/","section":"docs","title":"Clarity Docs"},{"body":"Shortcodes modifiers These modifiers are classes you can use with shortcodes to customize the look and feel of your layouts and components.\nGrid modifier space grid-2 2 columns grid-3 3 columns grid-4 4 columns Spacing modifier space mt-1 1.5rem top margin mt-2 3rem top margin mt-3 4.5rem top margin mt-4 6rem top margin use pt-1 ~ pt-4 for top padding\nmodifier space mb-1 1.5rem bottom margin mb-2 3rem bottom margin mb-3 4.5rem bottom margin mb-4 6rem bottom margin use pb-1 ~ pb-4 for bottom padding\nHow do I disable dark mode? Under params add enableDarkMode = false to your config.toml file. If your site is based on the exampleSite, the value is already included; you only need to uncomment it.\nThe user will still have the option to activate dark mode, if they so wish through the UI\nHow do I change the theme color? If the theme is a git submodule, you can copy the file assets/sass/_variables.sass from the theme into your own site. The location must be exactly the same as in the theme, so put it in YourFancySite/assets/sass/. You can then edit the file to customize the theme color in your site without having to modify the theme itself.\nHow can I change the address bar color on mobile devices? Just put the following line in the [params] section in your config.toml file (and of course change the color):\n1metaThemeColor = \u0026#34;#123456\u0026#34; How do I add custom styles, scripts, meta tags e.t.c Use hooks. Ideally, you should not override the them directly.\nInstead, you should duplicate these files at the root of you site directory.\nlayouts/partials/hooks/head.html layouts/partials/hooks/scripts.html The contents of the first file will be attached just before the \u0026lt;/head\u0026gt; tag.\nThe contents of the second file will be attached just before the \u0026lt;/body\u0026gt; tag.\nAlternatively, if you want to use the config.toml to track your custom styles or scripts, declare them as slices under [params] like so:\n1... 2[params] 3customCSS = [styleURL1, styleURL2 ...] 4customJS = [scriptURL1, scriptURL2 ... ] 5... I want to add custom SASS or JS Add custom SASS and JS via this custom SASS file and this custom JavaScript file.\n","link":"https://example.com/docs/compose/customize/","section":"docs","title":"Customize layouts \u0026 components"},{"body":"Prerequisites Firstly, ensure you have installed the extended version of Hugo. See installation steps from Hugo's official docs.\nGetting up and running Read the prerequisites above and verify you're using the extended version of Hugo. There are at least two ways of quickly getting started with Hugo and the VMware Clarity theme:\nOption 1 (recommended) Generate a new Hugo site and add this theme as a Git submodule inside your themes folder:\n1hugo new site yourSiteName 2cd yourSiteName 3git init 4git submodule add https://github.com/chipzoller/hugo-clarity themes/hugo-clarity 5cp -a themes/hugo-clarity/exampleSite/* . Then run\n1hugo server Hurray!\nOption 2 (Great for testing quickly) You can run your site directly from the exampleSite. To do so, use the following commands:\n1git clone https://github.com/chipzoller/hugo-clarity 2cd hugo-clarity/exampleSite/ 3hugo server --themesDir ../.. Although, option 2 is great for quick testing, it is somewhat problematic when you want to update your theme. You would need to be careful not to overwrite your changes.\nOption 3 (The new, most fun \u0026amp; painless approach) This option enables you to load this theme as a hugo module. It arguably requires the least effort to run and maintain in your website.\nFirst things first, ensure you have go binary installed on your machine.\n1git clone https://github.com/chipzoller/hugo-clarity.git clarity 2cd clarity/exampleSite/ 3hugo mod init my-site Open config.toml file in your code editor, replace theme = \u0026quot;hugo-clarity\u0026quot; with theme = [\u0026quot;github.com/chipzoller/hugo-clarity\u0026quot;] or just theme = \u0026quot;github.com/chipzoller/hugo-clarity\u0026quot;.\nHurray you can now run\n1hugo server To pull in theme updates, run hugo mod get -u ./... from the theme folder. If unsure, learn how to update hugo modules\nThere is more you could do with hugo modules, but this will suffice for our use case here.\n","link":"https://example.com/docs/clarity/getting-started/","section":"docs","title":"Getting started"},{"body":" Blog with tagging and category options\nDeeplinks\nNative Image Lazy Loading\nCustomizable (see config)\nDark Mode (with UI controls for user preference setting)\nToggleable table of contents\nFlexible image configuration\nLogo alignment\nMobile support with configurable menu alignment\nSyntax Highlighting\nRich code block functions including:\nCopy to clipboard Toggle line wrap (dynamic) Toggle line numbers Language label Toggle block expansion/contraction (dynamic) To put it all in context, here is a preview showing all functionality.\n","link":"https://example.com/docs/clarity/features/","section":"docs","title":"Features"},{"body":"Configuration If set, jump over to the config.toml file and start configuring your site.\nThis section will mainly cover settings that are unique to this theme. If something is not covered here (or elsewhere in this file), there's a good chance it is covered in this Hugo docs page.\nGlobal Parameters These options set global values that some pages or all pages in the site use by default.\nParameter Value Type Overidable on Page author string no twitter string no largeTwitterCard boolean no ga_analytics string no description string yes introDescription string no numberOfTagsShown integer no fallBackOgImage file path (string) no codeMaxLines integer yes codeLineNumbers boolean yes mainSections array/string no centerLogo boolean no logo file path (string) no mobileNavigation string no figurePositionShow boolean yes figurePositionLabel string no customCSS array of file path (string) no customJS array of file path (string) no enforceLightMode boolean N/A enforceDarkMode boolean N/A titleSeparator string no comment boolean no Page Parameters These options can be set from a page frontmatter or via archetypes.\nParameter Value Type Overrides Global title string N/A date date N/A description string N/A draft boolean N/A featured boolean N/A tags array/string N/A categories array/string N/A toc boolean N/A thumbnail file path (string) N/A featureImage file path (string) N/A shareImage file path (string) N/A codeMaxLines integer yes codeLineNumbers boolean yes figurePositionShow boolean yes figurePositionLabel string no comment boolean no Modify links menu To add, remove, or reorganize top menu items, edit this YAML file. These menu items also display any categories (taxonomies) that might be configured for articles.\nSocial media To edit your social media profile links, edit this YAML file.\nIf you wish to globally use a large Twitter summary card when sharing posts, set the global parameter largeTwitterCard to true.\nSearch engine If using Google Analytics, configure the ga_analytics global parameter in your site with your ID.\nForcing light or dark mode By default, sites authored using Clarity will load in the browser with the user's system-wide settings. I.e., if the underlying OS is set to dark mode, the site will automatically load in dark mode. Regardless of the default mode, a UI control switch exists to override the theme mode at the user's discretion.\nIn order to override this behavior and force one mode or another, add either enforceLightMode or enforceDarkMode to your config.toml file. If neither value is present, add it.\nTo enforce Light Mode by default, turn enforceLightMode to true.\nTo enforce Dark Mode by default, turn enforceDarkMode to true\n1[params] 2... 3enforceLightMode = true # Force the site to always load in light mode. 4... Please note that you cannot enforce both modes at the same time. It wouldn't make sense, would it?\nPlease also note that the mode toggle UI will remain in place. That way, if a user prefers dark mode, they can have their way. The best of both worlds.\nI18N This theme supports Multilingual (i18n / internationalization / translations)\nThe exampleSite gives you some examples already. You may extend the multilingual functionality by following the official documentation.\nThings to consider in multilingual:\nsupported languages are configured in config/_default/languages.toml add new language support by creating a new file inside i18n directory. Check for missing translations using hugo server --i18n-warnings taxonomy names (tags, categories, etc...) are translated in i18n as well (translate the key) menus are translated manually in the config files config/_default/menus/menu.xx.toml menu's languages list are semi-hardcoded. You may chose another text for the menu entry with languageMenuName. Please, do better and create a PR for that. content must be translated individually. Read the official documentation for information on how to do it. note: if you do NOT want any translations (thus removing the translations menu entry), then you must not have any translations. In the exampleSite that's as easy as removing the extra translations from the config/_default/... or executing this onliner:\n1sed \u0026#39;/^\\[pt]$/,$d\u0026#39; -i config/_default/languages.toml \u0026amp;\u0026amp; rm config/_default/menus/menu.pt.toml Comments Clarity supports Hugo built-in Disqus partial, you can enable Disqus simply by setting disqusShortname in your configuration file.\ndisqusShortname should be placed in root level of configuration.\nYou can also create a file named layouts/partials/comments.html for customizing the comments, checkout Comments Alternatives for details.\n","link":"https://example.com/docs/clarity/customize/","section":"docs","title":"Customization"},{"body":"Images Image figure captions You have the option of adding captions to images in blog posts and automatically prepending a desired string such as \u0026quot;Figure N\u0026quot; to the alt text. This is controlled via two global settings.\nfigurePositionLabel is a string which will be prepended to any alt text of an article image. By default, this is set to \u0026quot;Figure.\u0026quot; And figurePositionShow controls, globally, whether to show this label. It does not affect whether to show the image alt text, only the prefix figure caption. For more granular control, figurePositionShow can be overridden at the article level if desired.\nThe number will be automatically calculated and assigned after the figurePositionLabel text starting from the top of the article and counting down. Featured images will be excluded from this figuration.\nImage figure captions example In this example, figurePositionLabel is set to \u0026quot;Figure\u0026quot; in config.toml and this is the first image in a given article.\n1![Antrea Kubernetes nodes prepared](./images/calrity/image-figure.png) Inline images To make a blog image inline, append :inline to its alt text. Typically, inline images will have no alt text associated with them.\nInline images example 1\u0026lt;!-- some image without alt text --\u0026gt; 2![:inline](someImageUrl) 3 4\u0026lt;!-- some image with alt text --\u0026gt; 5 6![some alt text:inline](someOtherImageUrl) Float images to the left To align a blog image to the left, append :left to its alt text. Article text will then flow to the right of the image.\nFloat images left example 1\u0026lt;!-- some image without alt text --\u0026gt; 2![:left](someImageUrl) 3 4\u0026lt;!-- some image with alt text --\u0026gt; 5 6![some alt text:left](someOtherImageUrl) Add classes to images To add a class image to the left, append ::\u0026lt;classname\u0026gt; to its alt text. You can also add multiple classes to an image separated by space. ::\u0026lt;classname1\u0026gt; \u0026lt;classname2\u0026gt;.\nImage class example 1\u0026lt;!-- some image without alt text --\u0026gt; 2![::img-medium](someImageUrl) 3 4\u0026lt;!-- some image with alt text --\u0026gt; 5 6![some alt text::img-large img-shadow](someOtherImageUrl) Article thumbnail image Blog articles can specify a thumbnail image which will be displayed to the left of the card on the home page. Thumbnails should be square (height:width ratio of 1:1) and a suggested dimension of 150 x 150 pixels. They will be specified using a frontmatter variable as follows:\n1... 2thumbnail: \u0026#34;images/2020-04/capv-overview/thumbnail.jpg\u0026#34; 3... The thumbnail image will take precedence on opengraph share tags if the shareImage parameter is not specified.\nArticle featured image Each article can specify an image that appears at the top of the content. When sharing the blog article on social media, if a thumnail is not specified, the featured image will be used as a fallback on opengraph share tags.\n1... 2featureImage: \u0026#34;images/2020-04/capv-overview/featured.jpg\u0026#34; 3... Share Image Sometimes, you want to explicitly set the image that will be used in the preview when you share an article on social media. You can do so in the front matter.\n1... 2shareImage = \u0026#34;images/theImageToBeUsedOnShare.png\u0026#34; 3... Note that if a share image is not specified, the order of precedence that will be used to determine which image applies is thumbnail =\u0026gt; featureImage =\u0026gt; fallbackOgImage. When sharing a link to the home page address of the site (as opposed to a specific article), the fallbackOgImage will be used.\nAlign logo You can left align or center your site's logo.\n1... 2centerLogo = true # Change to false to align left 3... If no logo is specified, the title of the site will appear in its place.\n","link":"https://example.com/docs/clarity/images/","section":"docs","title":"Manipulating Images"},{"body":"Blog directory Edit the config.toml file and change the blogDir key. Value will be name of the folder where the blog articles reside.\n1[params] 2... 3blogDir = \u0026#34;blog\u0026#34; 4... For more info, see the Hugo docs.\nMobile menu positioning The navigation menu when mobile browsing can be configured in config.toml to open right or left depending on preference. The \u0026quot;hamburger\u0026quot; menu icon will always display in the upper right hand corner regardless.\n1[params] 2... 3mobileNavigation = \u0026#34;left\u0026#34; # Mobile nav menu will open to the left of the screen. 4... Tags and Taxonomies Show number of tags The number of tags and taxonomies (including categories) that should be shown can be configured so that any more than this value will only be accessible when clicking the All Tags button. This is to ensure a large number of tags or categories can be easily managed without consuming excess screen real estate. Edit the numberOfTagsShown parameter and set accordingly.\n1[params] 2... 3numberOfTagsShown = 14 # Applies for all other default \u0026amp; custom taxonomies. e.g categories, brands see https://gohugo.io/content-management/taxonomies#what-is-a-taxonomy 4... Number of tags example Table of contents Each article can optionally have a table of contents (TOC) generated for it based on top-level links. By configuring the toc parameter in the article frontmatter and setting it to true, a TOC will be generated only for that article. The TOC will then render under the featured image.\nTable of contents (TOC) example ","link":"https://example.com/docs/clarity/blogging/","section":"docs","title":"Blogging"},{"body":"Code Display line numbers Choose whether to display line numbers within a code block globally with the parameter codeLineNumbers setting to true or false.\n1[params] 2... 3codeLineNumbers = true # Shows line numbers for all code blocks globally. 4... Limit code block height You can globally control the number of lines which are displayed by default for your code blocks. Code which has the number of lines exceed this value will dynamically cause two code block expansion buttons to appear, allowing the user to expand to full length and contract. This is useful when sharing code or scripts with tens or hundreds of lines where you wish to control how many are displayed. Under params in config.toml file, add a value as follows:\n1[params] 2... 3codeMaxLines = 10 # Maximum number of lines to be shown by default across all articles. 4... If the value already exists, change it to the desired number. This will apply globally.\nIf you need more granular control, this parameter can be overridden at the blog article level. Add the same value to your article frontmatter as follows:\n1... 2codeMaxLines = 15 # Maximum number of lines to be shown in code blocks in this blog post. 3... If codeMaxLines is specified both in config.toml and in the article frontmatter, the value specified in the article frontmatter will apply to the given article. In the above example, the global default is 10 and yet the article value is 15 so code blocks in this article will auto-collapse after 15 lines.\nIf codeMaxLines is not specified anywhere, an internal default value of 100 will be assumed.\n","link":"https://example.com/docs/clarity/syntax-highlighting/","section":"docs","title":"Syntax Highlighting"},{"body":"Custom CSS and JS To minimize HTTP requests per page, we would recommend loading CSS styles and JavaScript helpers in single bundles. That is to say, one CSS file and one JavaScript file. Using Hugo minify functions, these files will be minified to optimize the size.\nGoing by the above 👆🏻 reason, we recommend adding custom CSS and JS via the custom SASS file (Compose, Clarity) and the custom JS file (Compose, Clarity).\nHowever, sometimes you may need to load additional style or script files. In such cases, you can add custom .css and .js files by listing them in the config.toml file (see the snippet below). Similar to images, these paths should be relative to the static directory.\n1[params] 2... 3customCSS = [\u0026#34;css/custom.css\u0026#34;] # Include custom CSS files 4customJS = [\u0026#34;js/custom.js\u0026#34;] # Include custom JS files 5... Pro Tip: You can change the theme colors via the this variable's SASS file\nHooks Clarity provides some hooks for adding code on page.\nIf you need to add some code(CSS import, HTML meta or similar) to the head section on every page, add a partial to your project:\nlayouts/partials/hooks/head-end.html Similar, if you want to add some code right before the body end, create your own version of the following file:\nlayouts/partials/hooks/body-end.html ","link":"https://example.com/docs/clarity/theme-overrides/","section":"docs","title":"Theme Overrides"},{"body":"It´s been a long time... This blogpost has been a very long time coming, over six months in fact. Not because it would take so long to write in itself, but because I have had a lot of other priorities and creating online content has been put far down the list. The longer time passes between each time I work on the post or any other projects for that matter it seems that the hurdle to overcome seems to be larger and larger every day. Getting started is often the most difficult thing; just taking that first, small step. This is something I feel every day as have side projects I want to keep working on that do not get enough of my time. To improve I need to start getting better at scheduling my time, sticking to it and deliver on the goals I set for myself to achieve. Creating a blog and a developing an online presence is part of my attempt to become something more than just a working developer, I want to share my knowledge and experiences with the world, with you. If my writing can help anyone overcome the problems they are facing or give them a shortcut to the solution they are seeking that would be wonderful.\nLets get back on to the business at hand Now, on to what this post is actually about, which is dependency inversion tools in Kotlin. The reason I started to look into this was because in my current job our applications normally run on a Kubernetes based platform which provides hosting for Kafka, databases, environment variables and other dependencies the application might need to run. However the issue I faced here was that I could not easily run the application locally while programming as long as the application used Kafka. Not without setting up Kafka in testcontainers and playing around with configuration I could get this done locally. Connecting to the development environment would require multiple environment variables that were provided by the platform and those I did not have immediate access to. So the desire to run my application locally prompted the quest to find a way to separate configuration per environment, and utilize dependency injection to make sure everything the program needed to run was loaded in.\nDependency Injection (DI) is a design pattern that deals with how components or objects acquire their dependencies. The primary goal of DI is to separate the creation of objects from their use, making systems more modular and promoting the principle of inversion of control (IoC). Instead of objects creating their own dependencies or having them hardcoded, they receive the dependencies from an outside source.\nThe immediate solution that comes to mind is to use Spring Boot which of course is known to heavily utilize dependency injection. The Spring framework provides a container that manages the lifecycle and configuration of application objects. However, this project is using Ktor and the goal was to see how similar DI could be achieved when still using Ktor instead of Spring Boot.\nThe primary DI frameworks for Kotlin as of today appears to be Koin, Dagger and Hilt, and Kotlin-inject. While Dagger and Hilt is primarily aimed at Android programming, the Kotlin-inject framework has a Dagger-like API and it provides compile time safety. Which means Kotlin-inject gives you multiplatform support and you have a compile-time dependency graph validation. Koin on the other hand does not, but offer faster build times and is very lightweight. This comparison of Koin and Kotlin-inject highlights differences, drawbacks and benefits of each.\nKoin Koin is a pragmatic, lightweight dependency injection framework written in Kotlin. It's designed specifically for Kotlin, making use of its features to provide a straightforward and concise way to manage dependencies.\nHere are some key features and aspects of Koin:\nDSL Based: Koin uses a Kotlin-based DSL for defining modules, making it very readable and expressive. No Reflection: Unlike some other DI frameworks, Koin doesn’t use reflection. This makes it faster and more predictable. Scopes: Koin provides different scopes (like singleton, factory, and scoped) to control the lifecycle of your instances. Extensions for Kotlin Features: Koin has extensions for Kotlin's coroutine support. Integration with Popular Frameworks: Koin offers modules for integration with popular frameworks like Android, Ktor, and Spring. The GitHub-project can be found here: https://github.com/InsertKoinIO/koin\nA Ktor quickstart guide is available: https://insert-koin.io/docs/quickstart/ktor\nKotlin-inject Kotlin-inject is a compile-time dependency injection framework for Kotlin. It aims to provide a simple and effective way to perform dependency injection while ensuring compile-time safety. Since it works at compile-time rather than runtime (like many other DI frameworks such as Dagger or Hilt in the Java world), it can be faster and have a smaller runtime footprint.\nHere are some key aspects of kotlin-inject:\nCompile-time Safety: The main advantage of compile-time DI tools like kotlin-inject is that they verify your bindings at compile time. This means if you make a mistake in your DI setup, you'll be informed during the compilation rather than at runtime. Annotation-driven: Like many DI tools, kotlin-inject uses annotations to mark classes for injection and to define modules. Generated Code: Instead of relying on reflection, kotlin-inject generates code during compilation. This leads to better performance at runtime. Kotlin-native: As the name suggests, it's tailored for Kotlin and leverages Kotlin's features for a clean DI setup. Integration with Popular Frameworks: While primarily a general-purpose DI tool, there might be integrations or plugins that help in using it with popular frameworks or platforms. The GitHub-project can be found here: https://github.com/evant/kotlin-inject\nThis detailed blogpost about kotlin-inject is very informative: https://proandroiddev.com/from-dagger-hilt-into-the-multiplatform-world-with-kotlin-inject-647d8e3bddd5\nSo which framework to choose? Well, it depends what is more important for you, and what you prefer. If you have experience with Dagger from before then Kotlin-inject may be feel very familiar to you. The drawback here is that the community around the framework is much smaller than the community around Koin. In addition, Koin does have excellent support for Ktor out of the box and is quite straightforward to use. Personally I would lean against Koin as I like what i´ve read about it so far in being lightweight and simple to use. At the time of writing I have not yet had sufficient experience with either to give a hands on opinion on them, but I intend to experiment with both in the coming days.\n","link":"https://example.com/blog/kotlin-di/","section":"blog","title":"Dependency injection with Kotlin Ktor"},{"body":"I have been working on a project to create a application to recognize food in images. This was done using deep learning, a subset of machine learning, to train a model and then create a simple application based on the model.\nBackground The idea behind this project is that using computer vision based on deep learning it is potentially possible to revolutionize how we track food intake. By creating a system that can automatically recognize food in pictures that would allow for much simpler logging of food intake. Combined with the possibility to recognize which food is in the picture, this could be linked to a database containing nutritional data such as calorie content and macronutrient composition. This could allow people to get a better understanding of how the food they consume impact their overall health, and helping them to make more informed decisions on what they eat and drink. Such a system could also be integrated in other applications and have many positive benefits, such as helping people live a healthier lifestyle, lose weight, or to reach specific fitness goals.\nObjective The goal of the project was to create a system that could take a image of a set of food images as input and then output the individual food items presented in the image. Thereafter the system should be integrated in a application and possibly explore further how the system can be used for personal health.\nMethods and data The notebook I used is a online tool called Kaggle, which provides computing power, notebooks, competitions, leaderboards and datasets to use in machine learning. This enables me to do deep learning without having a ton of GPU power on my own machine. Sharing notebooks on Kaggle also makes it very easy to recreate the project.\nDatasets with images and labels corresponding to those images are required to train a model. These datasets are not always readily available, but in this case I used a dataset containing 39,962 images food items, with 76,491 annotations spread over 498 food classes. This was published by aicrowd. The datasets contained images and a annotations.json file with labels in which each image had a label to describe what kind of food item was in the image.\nI downloaded three datasets: training, validation and test, all are correlated to the same version of the datasets. At first I attempted to download the datasets directly to my Kaggle notebook through code, but this was very slow and not usable. Instead I downloaded them to my local machine and then uploaded each of them to Kaggle as a public dataset. By having the datasets in Kaggle they could be imported into the notebook easily and the waiting time is minimal when starting the notebook.\nThe annotations.json was loaded into a Pandas dataframe for both the training and the validation dataset, before they were merged into one dataframe. New columns were added to the dataframe to be able to separate training and validation data, and a column for labels were added. All labels were found by using a get_label() method who accepts the name of a image file and searches for a match in the .json file using the image id. The code is available on my GitHub repository.\nA dataloader was created by using a ImageDataLoader and the dataframe. The image is resized and labels are set using the aforementioned get_label(). The architectures resnet34 and convnext_small_in22k was experimented with and train the model using a vision learner. The learner was ran through a fine tuning step which executed for minimum 5 epochs (iterations of training). This is the step that actually trains the model on the data inserted into it. After the tuning, the model was exported to a file and reuploaded to Kaggle as a dataset. This is one way of allowing it to be imported into another notebook to use the model.\nUsing the exported model I created a new notebook and used this to create a simple application using Gradio which can take a image, either by file upload or camera, and attempt to determine what kind of food is in the image.\nThe model used in the examples displayed below had about 55% accuracy after being trained. We can see from the two images that when there is less noise, or other non-relevant food items in the image it is a bit more certain about what the food item is. While it is quite certain that this is an egg, it also picks up that it might be seeing some kind of bread in the image, which is also true. At the bottom of this blog post you can try the application yourself.\nResults To attempt to get the best possible result from the model I attempted to find the best learning rate for the given learner and used this as the base learning rate when tuning the model.\nRunning several epochs had a decent improvement upon accuracy and reduction of training and validation loss.\nRelated links The code to train the model is available on my GitHub repository.\nThe model is trained in this Kaggle notebook and the notebook for the application.\nThe model and the training, validation and test dataset can be found on Kaggle.\nTry it out! I have created an simple application using this model to recognize images of food and hosted it on https://huggingface.co/spaces. The application is embedded in this blog post if you want to try it out!\n","link":"https://example.com/blog/food-recognizer-ai/","section":"blog","title":"Food Recognizer Application"},{"body":"Mvc Testing With a Configuration Class Writing a test for a controller I discovered something I would like to share. What I noticed was that even if my MockMvc test was expecting 200, and my controller returned either 200 or 204, my test failed with a 406.\nBackground A little bit of background to the problem. This controller was added to an existing project containing countless packages. To run the test I would need to load the application context, but to avoid loading all of it I created a inner static class in my test class. This inner static class serves as a TestApp which is annotated by @ComponentScan and where I tell it which packages to include. In addition this class is annotated with @SpringBootConfiguration which includes, among other annotations, the @Configuration which means that the class is declared as a bean and can be picked up by the Spring container, and therefore found by @ComponentScan.\nThe test-class needs annotated with @WebAppconfiguration and @ContextConfiguration to properly load the application context as the webAppContext is added to the MockMvcBuilders when creating the mockMvc object used in the tests. I attempted to get this working by annotating the test-class with @SpringBootTest(classes = ControllerTest.TestApp.class) to tell it to use the inner class. However this did not work as the result was a 406 whenever the controller attempted to return anything with a body. The solution was to remove the @SpringBootTest annotation and replace it with @WebMvcTest instead. Below I will explain what this looks like with a few examples.\nIf you are unsure or have forgotten what the 200, 204, and 406 HTTP status codes means, here is a short reminder:\n200 = Status ok 204 = No Content (response is still ok, but its empty) 406 = Not acceptable ( The content of the response is not matching accepted values. i.e expecting JSON got XML ) The problem As mentioned at the start of this post the error returned when running the test was a 406, when expecting to have a 200.\n1java.lang.AssertionError: Status expected:\u0026lt;200\u0026gt; but was:\u0026lt;406\u0026gt; 2Expected :200 3Actual :406 4\u0026lt;Click to see difference\u0026gt; 5 6\tat org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:59) 7\tat org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:122) 8\tat org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:627) 9\tat org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214) The controller calls the service which calls the repository which returns a set of UtilityServlet if the set contains elements, if not it returns a HTTP status 204 no content.\n1@RestController 2@RequestMapping(\u0026#34;/api/utility/servlet\u0026#34;) 3@RequiredArgsConstructor 4public class UtilityServletController { 5 6 private final UtilityServletService service; 7 8 @GetMapping(value = \u0026#34;/\u0026#34;) 9 public ResponseEntity\u0026lt;Set\u0026lt;UtilityServlet\u0026gt;\u0026gt; findAll() { 10 Set\u0026lt;UtilityServlet\u0026gt; servlets = service.findAllUtilityServlets(); 11 return servlets.size() \u0026gt; 0 ? ResponseEntity.ok().body(servlets) : ResponseEntity.noContent().build(); 12 } 13} In the test I wanted to mock the service, and when mocking something the test needs to be told what should happen when the mocked service is called. For this i use Mockito.when() and return a set of elements. This is useful when you make unit tests because you can isolate the system under testing and not having to worry about finding something in a database.\n1 @Test 2 public void findAllShouldReturnMultipleServlets() throws Exception { 3 Set\u0026lt;UtilityServlet\u0026gt; servlets = new HashSet\u0026lt;\u0026gt;(); 4 servlets.add(servletA); 5 servlets.add(servletB); 6 7 Mockito.when(utilityServletService.findAllUtilityServlets()).thenReturn(servlets); 8 mockMvc.perform(get(\u0026#34;/api/utility/servlet/\u0026#34;) 9 .accept(MediaType.APPLICATION_JSON)) 10 .andExpect(status().isOk()) 11 .andExpect(content().contentType(MediaType.APPLICATION_JSON)); 12 13 14 verify(utilityServletService, times(1)).findAllUtilityServlets(); 15 } The status() method in the .andExpect(status().isOk()) is actually from MockMvcResultMatchers, and the same with content(). These are imported at the top of the class via a static import which exposes those methods and makes them available to use without first specifying the class name. See the GitHub repository for examples.\nAfter the API-call has been done and the status code returned I use Mockito again to ensure that the service-method has been called exactly one time. This is done using the Mockito.verify()method. This has also been imported as a static method to make the code shorter and more concise, this is a personal preference.\nThe TestApp class mentioned above is a inner class within the test class itself and is\n1 @ComponentScan(basePackages = {\u0026#34;no.jaflaten.dev.mvcwithconfigurationclass.example\u0026#34;}) 2 @SpringBootConfiguration 3 public static class UtilityServletTestApp { 4 } Solution To fix the HTTP status 406 and get the 200 OK return code that was expected I had to annotate the test-class with @WebMvcTest. Combined with the other annotations everything is loaded correctly and the test executes as expected.\n1@ContextConfiguration 2@WebAppConfiguration 3@WebMvcTest 4public class UtilityServletControllerTest { 5 6... 7// initializing the mockMvc 8 @BeforeEach 9 public void setup() { 10 mockMvc = MockMvcBuilders 11 .webAppContextSetup(context) 12 .build(); 13 ... 14 } 15... 16 17} The test is green! The 406 could be correct in some cases if your expected content type is not matching the one that the method returns. In the test shown above I specified that i accepted and expected application/json, but this is not strictly necessary for the test to work.\nI hope this was helpful to you. Thank you for reading.\nThe source code used in this example is available in this GitHub repository.\n","link":"https://example.com/blog/mvc-testing-with-a-configuration-class/","section":"blog","title":"Mvc Testing With a Configuration Class"},{"body":"\nAbout me My name is Jørn-Are Flaten and I work as a software developer and currently writing a master thesis in software development at the Western Norway University of Applied Science. In the master project i´m working on improvements to a computing grid middleware software JAliEn in the ALICE project at CERN.\nI live in western Norway and have two great dogs.\nIf you would like to reach out you can contact me on LinkedIn\n","link":"https://example.com/about/","section":"about","title":"About"},{"body":"\n","link":"https://example.com/blog/","section":"blog","title":"Blog"},{"body":"","link":"https://example.com/categories/","section":"categories","title":"Categories"},{"body":"\nFlaten Developer Blog Jørn-Are Flaten is a developer and dog owner who writes about software development, APIs, deep learning, self improvement and different things that interest me.\nRead my blog\n","link":"https://example.com/","section":"","title":"Flaten Developer Blog"},{"body":"","link":"https://example.com/tags/","section":"tags","title":"Tags"}]